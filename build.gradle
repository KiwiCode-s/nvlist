
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        // Plugins for Android
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'

        // Plugins for iOS
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.2'
    }
}

plugins {
    // Plugin for uploading to bintray
    // Note: Causes a classpath conflict for org.apache.tools.zip
    id 'com.jfrog.bintray' version '1.8.0'

    // Google error-prone
    id 'net.ltgt.errorprone' version '0.0.16' apply false

    // Plugin used for reporting on the licenses of third-party dependencies
    id 'com.github.hierynomus.license' version '0.14.0'

    // Java Microbenchmark Harness plugin
    id 'me.champeau.gradle.jmh' version '0.4.6' apply false

    // Plugin for making a 'fat' JAR
    id 'com.github.johnrengelman.shadow' version '2.0.1'

    // Public API change detection
    id 'me.champeau.gradle.japicmp' version '0.2.5'

    // Mutation testing
    id 'info.solidsoft.pitest' version '1.4.0' apply false
}

apply from: 'dependencies.gradle'

def templateDir = file('template').getAbsoluteFile()

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'

    group = 'nl.weeaboo.vn'
    version = '4.0.0-alpha19'
    ext {
        javaVersion = JavaVersion.VERSION_1_8

        vnRootDir = templateDir
        vnResDir = new File(vnRootDir, 'res')
        buildToolsDir = new File(templateDir, 'build-tools') 

        pomLicenseConfig = {
           licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        pomLicenseConfig.resolveStrategy = Closure.DELEGATE_ONLY // Otherwise 'license' elem is missing
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://repo.gradle.org/gradle/libs-releases' } // For Gradle tooling API
        maven { url 'https://dl.bintray.com/anonl/gdx/' }
        maven { url 'https://dl.bintray.com/anonl/gdx-styledtext/' }
        maven { url 'https://dl.bintray.com/anonl/gdx-video/' }
        maven { url 'https://dl.bintray.com/anonl/luajpp2/' }
        maven { url 'https://dl.bintray.com/anonl/tcommon/' }
    }

    plugins.withType(JavaPlugin) {
        sourceCompatibility = javaVersion

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        /* 
         * Create a testlib to allow sub-projects to depend on each-others test code.
         * It would be cleaner to put the reusable testcode in a library, but that technique is incompatible with the
         * current version of buildship (Gradle<->Eclipse integration). The dependency from
         * core.main -> testlib.main -> core.test is flattened to a circular dependency between core and testlib.
         */
        configurations {
            testlib {
                extendsFrom testImplementation
            }
        }

        task testJar(type: Jar, dependsOn: testClasses) {
            classifier = 'testlib'
            from (sourceSets.test.output) {
                include '**/*.class' // Only include code, no resources
                exclude '**/*Test' // Exclude unit tests, try to only include stubs/mocks/etc.
            }
        }

        artifacts {
            testlib testJar
        }

        sourceSets {
            main {
                resources {
                    // Add additional resource dir for .lua/.lvn scripts
                    srcDirs 'src/main/lua'
                }
            }
            test {
                resources {
                    // Add additional resource dir for .lua/.lvn scripts
                    srcDirs 'src/test/lua'
                }
            }
        }

        dependencies {
            compileOnly deps.static_analysis_annotations

            testImplementation deps.junit
            testImplementation deps.guava_testlib

            // gdx-test is a required dependency since it contains the GdxUiTest test category
            testImplementation deps.gdx_test
        }

        test {
            def uiTest = project.hasProperty('uiTest')
            inputs.property('uiTest', uiTest) // Re-execute task if uiTest property changes
            useJUnit {
                if (!uiTest) {
                    // Exclude UI tests by default
                    excludeCategories 'nl.weeaboo.gdx.test.junit.GdxUiTest'
                }
            }
        }

        jacocoTestReport {
            reports {
                xml.enabled true
            }
        }

        project.apply from: rootProject.file('errorprone.gradle')
        project.apply from: rootProject.file('pitest.gradle')
        project.apply from: rootProject.file('jmh.gradle')
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        pkg {
            repo = 'nvlist'
            name = 'nvlist'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/anonl/nvlist.git'
            version {
                name = project.version
            }
        }
    }
}
