
apply plugin: 'com.android.library'
// apply plugin: 'com.android.application'

apply from: "${buildToolsDir}/common-android.gradle"

apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'

dependencies {
    implementation project(":nvlist-core")
   
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
    implementation "nl.weeaboo.gdx.video:gdx-video-android:$gdxVideoVersion"

    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"        
    
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"        
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")        
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

eclipse {
    sourceSets {
        main {
            java.srcDirs 'src', 'gen'
        }
    }

    jdt {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = javaVersion.VERSION_1_7
    }

    project {
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/template/res'
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
    
    classpath {
        plusConfigurations += [ project.configurations.compile ]        
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
    }
}

publishing {
    publications {
        android(MavenPublication) {
            // Manually configure artifact and dependencies (Android plugin doesn't supply a component)
            artifact file("${buildDir}/outputs/aar/${project.name}-release.aar")
            
            pom.withXml {                
                // Gather dependencies
                def projectDeps = [].toSet()
                projectDeps += configurations.implementation.allDependencies
                // projectDeps += configurations.natives.allDependencies

                def root = asNode()
                
                // Append dependencies to POM
                def depsNode = root.appendNode('dependencies')
                projectDeps.each {
                    def depNode = depsNode.appendNode('dependency')
                    depNode.appendNode('groupId', it.group)
                    depNode.appendNode('artifactId', it.name)
                    depNode.appendNode('version', it.version)
                }

                // Append license info
                root = root.children().last() + pomLicenseConfig
            }
            
            artifactId 'nvlist-android'
        }
    }
}

bintray {
    publications = ['android']
}
