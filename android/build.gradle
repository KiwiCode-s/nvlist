
eclipse {
    sourceSets {
        main {
            java.srcDirs 'src', 'gen'
        }
    }

    jdt {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = javaVersion.VERSION_1_7
    }

    project {
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/template/res'
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
    
    classpath {
        plusConfigurations += [ project.configurations.compile ]        
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
    }
}


android {
    android.applicationVariants.all { variant ->
        variant.mergeAssets.doLast {
            // Generate an assets.list file containing all assets files in the APK
            def fileTree = fileTree(dir: outputDir)
            
            def assetList = ""
            fileTree.visit {
                assetList <<= it.relativePath
                if (it.isDirectory()) {
                    // Add a trailing slash to distinguish folders from files
                    assetList <<= "/"
                }
                assetList <<= "\n"
            }
        
            def outputFile = new File(outputDir, "assets.list")
            outputFile.text = assetList
            
            logger.info("Wrote assets list to {}", outputFile)
        }
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")        
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
    