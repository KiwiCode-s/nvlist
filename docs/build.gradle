plugins {
    id 'com.github.jruby-gradle.base' version '1.6.0'
}

dependencies {
    jrubyExec 'rubygems:bundler:1.5.2'
    jrubyExec 'rubygems:jekyll-feed:0.11.0'
    jrubyExec 'rubygems:jekyll:3.8.2'
    jrubyExec 'rubygems:jekyll-theme-minimal:0.1.1'
}

tasks.register('clean') {
    delete project.buildDir
}

tasks.register('copyJavadoc', Sync) {
    description = "Copies generated Javadoc to the /assets folder"

    destinationDir = new File("assets/javadoc")
    from { project(':nvlist-api').tasks.javadoc }
}

tasks.register('generateLuaPages') {
    def sourceDir = project(':nvlist-core').file('src/main/lua/script/builtin')
    def destinationDir = file("_lua")

    inputs.dir(sourceDir)
    outputs.dir(destinationDir)

    doLast {
        def fileTree = fileTree(sourceDir)
        fileTree.visit { details ->
            def outputFile = new File(destinationDir, "${details.relativePath}".replace(".lua", ".md"))
            if (details.directory) {
                outputFile.mkdirs()
            } else {
                def luaPath = "${details.relativePath}"
                def luaContent = details.file.text
                    .replace('"', '\\"')
                    .replace('{', '&#123;')
                outputFile.text = """---
id: ${luaPath}
title: ${luaPath}
---

<!--excerpt-->

{% include sourcecode.html id="textnotation" lang="lua" class="full-screen" content="${luaContent}" %}
                """
            }
        }
    }
}

tasks.register('assemble') {
    dependsOn copyJavadoc
    dependsOn generateLuaPages
}

def jekyllTask(name, args) {
    return tasks.register(name, com.github.jrubygradle.JRubyExec) {
        if (args.startsWith('new')) {
            throw new StopExecutionException("'new' isn't allowed by the Gradle task")
        }
        script 'jekyll'
        workingDir project.projectDir
        scriptArgs args.split()

        dependsOn assemble
    }
}

// 'jekyllServe' task for running a local Jekyll server
jekyllTask('jekyllServe', 'serve')

// 'jekyllBuild' task that builds the site into the '_site' folder
jekyllTask('jekyllBuild', 'build').configure {
    outputs.dir('_site')
}
