
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0-alpha1'
    }
}

// Loads a .properties file
def loadProperties(String filename) {
    def props = new Properties()
    def propertiesFile = file(filename)
    if (propertiesFile.canRead()) {
        propertiesFile.withInputStream { instr ->
            props.load(instr)
        }
    }
    return props
}

// Standard folders
def rootDir = new File(vnRoot).getCanonicalFile()
def resDir = new File(rootDir, "/res")
def buildResDir = new File(rootDir, "/build-res")

logger.lifecycle("VN root folder: " + rootDir)
logger.lifecycle("VN resource folder: " + resDir)
logger.lifecycle("VN build-resource folder: " + buildResDir)

// Load user-defined build.properties file
def settings = loadProperties("${buildResDir}/build.properties")

allprojects {
    version = settings.appVersion

    ext {
        nvlistVersion = settings.nvlistVersion
    }

    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/anonl/nvlist/" }
        maven { url "https://dl.bintray.com/anonl/gdx-styledtext/" }
        maven { url "https://dl.bintray.com/anonl/luajpp2/" }
        maven { url "https://dl.bintray.com/anonl/tcommon/" }
    }
    
    plugins.withType(JavaPlugin) {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'
    }
}

project(':desktop') {
    apply plugin: 'java'

    dependencies {
        compile "nl.weeaboo.vn:nvlist-desktop:$nvlistVersion"        
    }
    
    project.ext.mainClassName = "nl.weeaboo.vn.desktop.DesktopLauncher"

    task run(dependsOn: classes, type: JavaExec) {
        main = project.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        standardInput = System.in
        workingDir = rootDir
        ignoreExitValue = true
    }
}

project(':android') {
    apply plugin: 'com.android.application'

    configurations { natives }

    dependencies {
        compile("nl.weeaboo.vn:nvlist-android:$nvlistVersion@aar") {
            transitive = true
        }
    }
    
    android {
        buildToolsVersion '23.0.2'
        compileSdkVersion 'android-23'
        
        sourceSets {
            main {
                manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = [resDir]
                jniLibs.srcDirs = ['libs']
            }
    
            instrumentTest.setRoot('tests')
        }
        defaultConfig {
            minSdkVersion 8
            targetSdkVersion 23
        }
        lintOptions {
            textOutput 'stdout'
            textReport true
        }
    }
    
    // called every time gradle gets executed, takes the native dependencies of
    // the natives configuration, and extracts them to the proper libs/ folders
    // so they get packed with the APK.
    task copyAndroidNatives() { 
        file('libs/armeabi/').mkdirs();
        file('libs/armeabi-v7a/').mkdirs();
        file('libs/x86/').mkdirs();
    
        configurations.natives.files.each { jar ->
            def outputDir = null
            if(jar.name.endsWith('natives-armeabi-v7a.jar')) outputDir = file('libs/armeabi-v7a')
            if(jar.name.endsWith('natives-armeabi.jar')) outputDir = file('libs/armeabi')
            if(jar.name.endsWith('natives-x86.jar')) outputDir = file('libs/x86')
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include '*.so'
                }
            }
        }
    }
    
    task run(type: Exec) {
        def path
        def localProperties = project.file('../local.properties')
        if (localProperties.exists()) {
            Properties properties = new Properties()
            localProperties.withInputStream { instr ->
                properties.load(instr)
            }
            def sdkDir = properties.getProperty('sdk.dir')
            if (sdkDir) {
                path = sdkDir
            } else {
                path = "$System.env.ANDROID_HOME"
            }
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    
        def adb = path + "/platform-tools/adb"
        commandLine "$adb", 'shell', 'am', 'start', '-n', 'nl.weeaboo.vn.android/nl.weeaboo.vn.android.AndroidLauncher'
    }    
}
