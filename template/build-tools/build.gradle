
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        // Plugin for making a 'fat' JAR
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'

        // Plugins for Android
        classpath 'com.android.tools.build:gradle:3.0.1'
   }
}

// Loads a .properties file
def loadProperties(String filename) {
    def props = new Properties()
    def propertiesFile = file(filename)
    if (propertiesFile.canRead()) {
        propertiesFile.withInputStream { instr ->
            props.load(instr)
        }
    }
    return props
}

logger.lifecycle("VN root parameter: " + vnRoot)

// Standard folders
allprojects {
    ext {
        vnRootDir = new File(vnRoot).getCanonicalFile()
        vnResDir = new File(vnRootDir, "/res")
        buildResDir = new File(vnRootDir, "/build-res")
        buildToolsDir = rootProject.projectDir
    }
}

logger.lifecycle("VN resource folder: " + vnResDir)
logger.lifecycle("VN build-resource folder: " + buildResDir)

// Load user-defined build.properties file
def settings = loadProperties("${buildResDir}/build.properties")

allprojects {
    apply plugin: 'eclipse'
    
    group = settings.appPackage
    version = settings.appVersion

    ext {
        nvlistVersion = settings.nvlistVersion
        javaVersion = JavaVersion.VERSION_1_8
    }

    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/anonl/nvlist/" }
        maven { url "https://dl.bintray.com/anonl/gdx-styledtext/" }
        maven { url "https://dl.bintray.com/anonl/gdx-video/" }
        maven { url "https://dl.bintray.com/anonl/luajpp2/" }
        maven { url "https://dl.bintray.com/anonl/tcommon/" }
    }
    
    plugins.withType(JavaPlugin) {
        sourceCompatibility = javaVersion
        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'
    }
}

project(':desktop') {
    apply from: "${buildToolsDir}/common-desktop.gradle"

    dependencies {
        compile "nl.weeaboo.vn:nvlist-desktop:$nvlistVersion"
    }

    mainClassName = settings.desktopMain
}

project(':android') {
    if (!settings.androidEnabled.toBoolean()) {
        return
    }

    apply plugin: 'com.android.application'

    apply from: "${buildToolsDir}/common-android.gradle"

    dependencies {
        compile("nl.weeaboo.vn:nvlist-android:$nvlistVersion@aar") {
            transitive = true
        }
    }
    
    android {
        signingConfigs {
            release {
                keyAlias  settings.keyAlias
                keyPassword  settings.keyPassword
                storeFile new File(buildResDir, settings.keyStoreFile)
                storePassword settings.keyStorePassword
            }
        }

        defaultConfig {
            applicationId settings.appPackage
            versionCode settings.androidVersionCode as int
            versionName project.version
            manifestPlaceholders = [
                androidMain: settings.androidMain
            ]
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    // Run installed app through adb
    task runInstalled(type: Exec) {
        def adb = android.getAdbExe()
        def target = settings.appPackage + '/' + settings.androidMain
        commandLine "$adb", 'shell', 'am', 'start', '-n', target
    }
    // Install, then run debug build
    task runDebug(dependsOn: ['installDebug', 'runInstalled']) {
    }
    // Install, then run release build
    task runRelease(dependsOn: ['installRelease', 'runInstalled']) {
    }
}

project(':ios') {
    if (!settings.iosEnabled.toBoolean()) {
        return
    }

    apply from: "${buildToolsDir}/common-ios.gradle"
    
    dependencies {
        compile "nl.weeaboo.vn:nvlist-desktop:$nvlistVersion"
    }

    ext.mainClassName = settings.iosMain
}