
@@

--Import built-in NVList functions
require("builtin/vn")

function main()
	print("main")
	return titlescreen()
end

function titlescreen()
	print("titlescreen")
	print(System.getEnv())

    testViewport()
    testTextLog()
    testGuiScreen()

    registerSpeaker("guy", "Mr. Guy")
    registerSpeaker("man", Text.createStyledText("The Man", Text.createStyle{color=0xFFFF0000}))
    
    setTextModeADV()
    texton()
    
    local i = img("ziponly", 200, 200)
    i:setAlign(0.5, 0.5)

    local mergedTex = composite({
        {tex="ziponly"},
        {tex="ziponly", pos={100, 100}},
    })
    i = img(mergedTex, 400, 0)
    
    --[[
    for level,t in ipairs(blurMultiple("testjng", 4, 8)) do
        local i = img(t)
        i:setPos(100 * level, 0)
    end
    ]]
    
    --[[
    local prevBlurred = nil
    for n=1,100,0.5 do
        local blurred = img(blur("testjng", n))
        
        if prevBlurred ~= nil then
            prevBlurred:destroy()
        end
        prevBlurred = blurred        
        
        blurred:setPos(screenWidth/2, screenHeight/2)
        blurred:setAlign(0.5, 0.5)
        yield(3)
    end
    ]]

    -- button("gui/button")
    
    for i=1,3 do
        local selected = choice("a", "b", "Agh")
        print("selected", selected)
    end

    --movie("test")
    call("images")    
    --call("speakers")    
end

function testViewport()
    local view = createViewport()

    local text = textimg("If your decorators include information that is expensive to compute or potentially distracting, you may want to contribute your own preferences that allow the user to further fine-tune the decorator once it is on.")
    view:setContents(text)

    for n=1,screenWidth do
        view:setX(n)
        yield()
    end

    waitClick()
end

function testTextLog()
    for n=1,10 do
        appendTextLog("If your decorators include information that is expensive to compute or potentially distracting, you may want to contribute your own preferences that allow the user to further fine-tune the decorator once it is on.", true)
    end
    
    local textLog = getTextState():getTextLog()
    
    local panel = gridPanel()
    
    local page = textLog:getPageCount() - 1
    while page >= 0 do
        local text = textimg(textLog:getPage(page))
        
        panel:add(text):growX()
        panel:endRow()
        
        page = page - 1
    end
    panel:pack()

    while not Input.consume(VKeys.mouseLeft) do
        if Input.isPressed(VKeys.up) then
            panel:setY(panel:getY() - 1)
        end
        if Input.isPressed(VKeys.down) then
            panel:setY(panel:getY() + 1)
        end
        yield()
    end
end

function testGuiScreen()
    local panel = gridPanel()
    
    panel:add(img("test")):grow()
    
    panel:add(img("test"))
    panel:endRow()
    panel:add(img("test")):growY()
    panel:add(img("test"))

    waitClick()
end

@@
